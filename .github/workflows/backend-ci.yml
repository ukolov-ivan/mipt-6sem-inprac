name: Backend CI Pipeline

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # env:
    #   SECRET_KEY: ${{ secrets.SECRET_KEY }}

    # services:
    #   postgres:
    #     image: postgres:13
    #     ports:  
    #       - 5432:5432
    #     env:
    #       POSTGRES_DB: mydb
    #       POSTGRES_USER: user
    #       POSTGRES_PASSWORD: password
    #     options: >-
    #       --health-cmd="pg_isready -U user"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        cd ./backend/
        touch .env
    
    - name: Setup secrets
      run: 'echo SECRET_KEY="$SECRET_KEY" > .env'
      shell: bash
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and export
      uses: docker/build-push-action@v6
      with:
        tags: ${{ github.repository_owner }}/backend:latest
        outputs: type=docker,dest=/tmp/backend-image.tar
        file: backend/Dockerfile
    
    - name: Upload as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-image
        path: /tmp/backend-image.tar

  lint-format:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download as an artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-image
        path: /tmp
        
    - name: Load image
      run: |
        docker load --input /tmp/backend-image.tar

    - name: Lint and format
      run: |
        docker run --rm --volume ${{ github.workspace }}:/app --workdir /app/backend ${{ github.repository_owner }}/backend:latest bin bash -c "pip freeze; mypy .; pylint ."

  test:
    runs-on: ubuntu-latest
    needs: lint-format
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download as an artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-image
        path: /tmp

    - name: Load image
      run: |
        docker load --input /tmp/backend-image.tar

    - name: Run tests
      run: |
        docker run --rm --volume ${{ github.workspace }}:/app --workdir /app/backend ${{ github.repository_owner }}/backend:latest python manage.py test
