name: CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release/*
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:  
          - 5432:5432
        env:
          POSTGRES_DB: mydb
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd="pg_isready -U user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Build Docker images
        run: |
          docker build -t yourusername/backend:latest -f backend/Dockerfile .
          docker build -t yourusername/frontend:latest -f frontend/Dockerfile .

      - name: Save Docker images as artifacts
        run: |
          docker save yourusername/backend:latest | gzip > backend_image.tar.gz
          docker save yourusername/frontend:latest | gzip > frontend_image.tar.gz
        continue-on-error: true

      - name: Upload backend artifact
        uses: actions/upload-artifact@v2
        with:
          name: backend-image
          path: backend_image.tar.gz

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-image
          path: frontend_image.tar.gz

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: Lint backend
        run: |
          cd backend
          flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
  #   steps:
  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Load backend image
  #       run: |
  #         gunzip -c backend_image.tar.gz | docker load

  #     - name: Load frontend image
  #       run: |
  #         gunzip -c frontend_image.tar.gz | docker load

  #     - name: Publish backend image
  #       run: |
  #         docker push yourusername/backend:latest

  #     - name: Publish frontend image
  #       run: |
  #         docker push yourusername/frontend:latest