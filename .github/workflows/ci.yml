name: CI Pipeline

on:
  # pull_request:
  #   branches:
  #     - master
  #     - release/*
  # push:
  #   branches:
  #     - master
  #     - release/*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres:13
    #     ports:  
    #       - 5432:5432
    #     env:
    #       POSTGRES_DB: mydb
    #       POSTGRES_USER: user
    #       POSTGRES_PASSWORD: password
    #     options: >-
    #       --health-cmd="pg_isready -U user"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Checkout
      #   uses: actions/checkout@v2

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.10'

      # - name: Install backend dependencies
      #   run: |
      #     cd backend
      #     pip install -r requirements.txt
      - name: Build and export backend
        uses: docker/build-push-action@v6
        with:
          tags: ${{ github.repository_owner }}/backend:latest
          outputs: type=docker,dest=/tmp/backend-image.tar
          file: backend/Dockerfile
      
      - name: Upload backend as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend-image.tar

      - name: Build and export frontend
        uses: docker/build-push-action@v6
        with:
          tags: ${{ github.repository_owner }}/frontend:latest
          outputs: type=docker,dest=/tmp/frontend-image.tar
          file: frontend/Dockerfile
      
      - name: Upload frontend as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend-image.tar

      # - name: Build Docker images
      #   run: |
      #     docker build --tag ${{ github.repository_owner }}/backend:latest --file backend/Dockerfile .
      #     docker build --tag ${{ github.repository_owner }}/frontend:latest --file frontend/Dockerfile .

      # - name: Save Docker images artifacts
      #   run: |
      #     docker save ${{ github.repository_owner }}/backend:latest |  backend_image.tar
      #     docker save ${{ github.repository_owner }}/frontend:latest | frontend_image.tar

      # - name: Upload backend as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: backend-image
      #     path: backend_image.tar

      # - name: Upload frontend as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: frontend-image
      #     path: frontend_image.tar

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download backend as artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: /tmp
      
      - name: Download backend as artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      # - name: Checkout
      #   uses: actions/checkout@v2

      # - name: Download backend as artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: backend-image
      #     path: backend_image.tar

      - name: Download frontend as artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: frontend_image.tar

      - name: Load Docker images as artifacts
        run: |
          gunzip -c backend-image.tar | docker load
          gunzip -c frontend-image.tar | docker load
        
      # TODO -- Replace with loading docker images from previous job 
      # - name: Set up Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'

      # - name: Install frontend dependencies
      #   run: |
      #     cd frontend
      #     npm install

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
        continue-on-error: true

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.10'

      # - name: Install backend dependencies
      #   run: |
      #     cd backend
      #     pip install -r requirements.txt

      - name: Lint backend
        run: |
          cd backend
          mypy .
          pylint .
        continue-on-error: true

      - name: Format backend
        run: |
          cd backend
          black --line-length 120 --check .
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # TODO -- Replace with loading docker images from previous job 
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test
        continue-on-error: true

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
  #   steps:
  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Load backend image
  #       run: |
  #         gunzip -c backend_image.tar.gz | docker load

  #     - name: Load frontend image
  #       run: |
  #         gunzip -c frontend_image.tar.gz | docker load

  #     - name: Publish backend image
  #       run: |
  #         docker push yourusername/backend:latest

  #     - name: Publish frontend image
  #       run: |
  #         docker push yourusername/frontend:latest